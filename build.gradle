plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.5'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'com.palantir.docker' version '0.35.0'
    id 'com.google.cloud.tools.jib' version '3.2.0'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-mysql'
    implementation 'javax.validation:validation-api:2.0.1.Final'
    implementation 'com.github.ben-manes.caffeine:caffeine'
    implementation 'org.webjars:jquery:2.2.4'
    implementation 'org.webjars:jquery-ui:1.11.4'
    implementation 'org.webjars:bootstrap:3.3.6'
    implementation 'ro.isdc.wro4j:wro4j-core:1.8.0'

    runtimeOnly 'com.mysql:mysql-connector-j'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.testcontainers:mysql:1.17.6'
    testImplementation 'org.jacoco:org.jacoco.core:0.8.2'
    
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
}

import org.apache.tools.ant.taskdefs.condition.Os

tasks {
    test {
        useJUnitPlatform()
        systemProperty 'spring.profiles.active', 'test'
    }

    bootJar {
        enabled = true
        archiveFileName = 'petclinic.jar'
    }
    
    task DBInit() {
        doLast {
            // Run docker-compose up -d
            exec {
                commandLine 'docker-compose', 'up', '-d'
            }

            // Wait for 5 seconds
            sleep(5000)

            // Get the CONTAINER ID
            def containerIdStdout = new ByteArrayOutputStream()
            exec {
                commandLine 'docker', 'ps', '--filter', 'label=com.docker.compose.project=petclinic', '--format', '{{.ID}}'
                standardOutput = containerIdStdout
            }
            def containerId = containerIdStdout.toString().trim()

            // Check if container ID is found
            if (containerId) {
                println "Watching logs of container: $containerId"

                // Tail the logs and search for the desired string
                def process
                    try {
                        def command = Os.isFamily(Os.FAMILY_WINDOWS) ? 
                                    "cmd /c docker logs -f $containerId" :
                                    "sh -c 'docker logs -f $containerId'"
                        process = Runtime.getRuntime().exec(command)

                        // Read the output from the process
                        new BufferedReader(new InputStreamReader(process.inputStream)).withReader { reader ->
                            String line
                            while ((line = reader.readLine()) != null) {
                                println line
                                if (line.contains("MySQL init process done.")) {
                                    println "MySQL init process done."
                                    break
                                }
                            }
                        }
                    } catch (Exception e) {
                        println "Error reading logs: ${e.message}"
                    } finally {
                        process?.destroy()
                    }
            } else {
                println "Container with label 'com.docker.compose.project=petclinic' not found."
            }
        }
    }

    // docker {
    //     println("gradle docker-plugin start = ${project.name}:${project.version}")
    //     // name "${project.name}:${project.version}"
    //     name 'hub.docker.com/dlsrks1218/petclinic-new:latest'
    //     files bootJar.archivePath
    //     buildArgs(['JAR_FILE': tasks.bootJar.outputs.files.singleFile.name])
    // }

    jib {
        from {
            image = "openjdk:17.0.2-jdk-slim"
        }
        to {
            image = "dlsrks1218/petclinic"
            tags = ["latest"]
            auth {
                username = 'dlsrks1218'
                password = "qlalf0011!"
            }
        }

        container {
            mainClass = 'org.springframework.samples.petclinic.PetClinicApplication'
            environment = [
                'APP_HOME': '/app',
                'LOG_HOME': '/app/logs',
            ]
            workingDirectory = '/app'
            user = '999'
            ports = [ '8080' ]
        }
    }

    task DBShutDown(type:Exec) {
        commandLine 'docker-compose', 'down'
    }
}
